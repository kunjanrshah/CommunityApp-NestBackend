// npx prisma migrate dev --name ""
// npx prisma generate
// npx prisma format

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum AddrType {
  OWN
  RENTED
}

model AppVersion {
  id      Int @id
  version Int
}

model User {
  id                 Int       @id @default(autoincrement())
  role               Role      @default(USER)
  head_id            Int       @default(0)
  member_code        String?   @unique // Optional field
  email              String?   @unique // Optional field
  mobile             String?   @unique // Optional field
  password           String
  relation_id        Int? // Optional field
  sub_community_id   Int?
  local_community_id Int?
  first_name         String
  last_name_id       Int
  father_name        String? // Optional field
  mother_name        String? // Optional field
  status             Boolean   @default(true)
  gender             Boolean
  phone              String? // Optional field
  profile_pic        String    @default("noimage.png")
  region             String? // Optional field
  is_expired         Boolean   @default(false)
  expire_date        DateTime? // Optional field
  education_id       Int? // Optional field
  occupation_id      Int? // Optional field
  deleted            Boolean   @default(false)
  updated            DateTime  @updatedAt
  login_status       Boolean? // Optional field
  last_login         DateTime? // Optional field
  profile_percent    Float     @default(5)
  resetToken         String? // Token for password reset
  resetTokenExpiry   DateTime? // Expiry for reset token

  userAddress        UserAddress? // One-to-one relation (Optional)
  userPersonalDetail UserPersonalDetail?
  userWorkDetail     UserWorkDetail?
  userMatrimony      UserMatrimony?
  subCast            SubCast?            @relation(fields: [last_name_id], references: [id])
  occupation         Occupation?         @relation(fields: [occupation_id], references: [id])
  education          Education?          @relation(fields: [education_id], references: [id])
  relation           Relations?          @relation(fields: [relation_id], references: [id])
  localCommunity     LocalCommunity?     @relation(fields: [local_community_id], references: [id])
  subCommunity       SubCommunity?       @relation(fields: [sub_community_id], references: [id])
}

model UserAddress {
  id            Int      @id @default(autoincrement())
  city_id       Int
  states_id     Int
  addr_type     AddrType @default(OWN)
  address       String
  area          String?
  pincode       String?
  local_address String?
  mosaad_id     Int?
  user_id       Int?     @unique
  user          User?    @relation(fields: [user_id], references: [id])
  city          City?    @relation(fields: [city_id], references: [id])
  states        States?  @relation(fields: [states_id], references: [id])
}

model UserPersonalDetail {
  id                  Int              @id @default(autoincrement())
  user_id             Int              @unique
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  is_donor            Boolean          @default(false)
  matrimony           Boolean          @default(false)
  birth_date          DateTime?
  native_place_id     Int?
  native_place        City?            @relation(fields: [native_place_id], references: [id], onDelete: SetNull)
  blood_group         String?
  current_activity_id Int?
  current_activity    CurrentActivity? @relation(fields: [current_activity_id], references: [id], onDelete: SetNull)
  marital_status      String?          @db.VarChar(20)
  marriage_date       DateTime?
  gotra_id            Int?
  gotra               Gotra?           @relation(fields: [gotra_id], references: [id], onDelete: SetNull)
}

model UserWorkDetail {
  id                   Int     @id @default(autoincrement())
  user_id              Int     @unique
  committee_id         Int?
  designation_id       Int?
  business_category_id Int?    @default(0)
  business_address     String?
  business_logo        String?
  company_name         String?
  website              String?
  work_details         String?

  user             User              @relation(fields: [user_id], references: [id])
  businessCategory BusinessCategory? @relation(fields: [business_category_id], references: [id])
  committee        Committee?        @relation(fields: [committee_id], references: [id])
  designation      Designation?      @relation(fields: [designation_id], references: [id])
}

model UserMatrimony {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique
  birth_time       DateTime?
  birth_place_id   Int?
  hobby            String
  about_me         String?
  weight           Float?
  height           Float?
  is_spect         Boolean   @default(false)
  is_mangal        Boolean   @default(false)
  is_shani         Boolean   @default(false)
  facebook_profile String?   @db.VarChar(255)
  expectation      String?   @db.VarChar(255)

  birth_place City? @relation(fields: [birth_place_id], references: [id])
  user        User  @relation(fields: [user_id], references: [id])
}

model States {
  id          Int           @id @default(autoincrement())
  name        String
  deleted     Boolean       @default(false)
  updated     DateTime      @updatedAt
  cities      City[] // ✅ One-to-Many relationship with City
  UserAddress UserAddress[]
}

model City {
  id                 Int                  @id @default(autoincrement())
  name               String
  deleted            Boolean              @default(false)
  updated            DateTime             @updatedAt
  states_id          Int // ✅ Foreign Key
  states             States               @relation(fields: [states_id], references: [id]) // ✅ Relationship Definition
  UserAddress        UserAddress[]
  UserPersonalDetail UserPersonalDetail[]
  UserMatrimony      UserMatrimony[]
}

model BusinessCategory {
  id             Int              @id @default(autoincrement())
  name           String
  deleted        Boolean          @default(false)
  updated        DateTime         @updatedAt
  UserWorkDetail UserWorkDetail[]
}

model Occupation {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}

model Committee {
  id             Int              @id @default(autoincrement())
  name           String
  deleted        Boolean          @default(false)
  updated        DateTime         @updatedAt
  UserWorkDetail UserWorkDetail[]
}

model Designation {
  id             Int              @id @default(autoincrement())
  name           String
  deleted        Boolean          @default(false)
  updated        DateTime         @updatedAt
  UserWorkDetail UserWorkDetail[]
}

model CurrentActivity {
  id                 Int                  @id @default(autoincrement())
  name               String
  deleted            Boolean              @default(false)
  updated            DateTime             @updatedAt
  UserPersonalDetail UserPersonalDetail[]
}

model Education {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}

model SubCommunity {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}

model LocalCommunity {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}

model Relations {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}

model Gotra {
  id                 Int                  @id @default(autoincrement())
  name               String
  deleted            Boolean              @default(false)
  updated            DateTime             @updatedAt
  UserPersonalDetail UserPersonalDetail[]
}

model SubCast {
  id      Int      @id @default(autoincrement())
  name    String
  deleted Boolean  @default(false)
  updated DateTime @updatedAt
  User    User[]
}
